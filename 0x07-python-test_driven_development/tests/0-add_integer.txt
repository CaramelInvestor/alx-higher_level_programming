===================================
Doc test for 0-add_integer.py
==================================-

This function takes two arguments, 'a' and 'b', and returns their sum as an integer.
If 'b' is not provided, it defaults to 98.

Parameters:
a (int or float): The first number to be added.
b (int or float, optional): The second number to be added. Defaults to 98.

Returns:
int: The sum of 'a' and 'b'.

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.
::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 10)
    15

the parameter b has a default value of 98
::
    >>> add_integer(7)
    105

    >>> add_integer(2)
    100


the function can also handle floating point numbers
::
    >>> add_integer(2.0, 3.0)
    5

float numbers are typecasted to integers before being worked optional
::
    >>> add_integer(2.9, 0.9)
    2

    >>> add_integer(-2.9, -0.9)
    -2

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
